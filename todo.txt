      |
      |
      |
      |   __       __ ________ __       __  ______  _______   ______       ________  ______  _______   ______ 
      |  |\ \     /  \\       \\ \     /\ \/\     \|\      \ /\     \     |\       \/\     \|\      \ /\     \ 
      |  | ▓▓\   /  ▓▓ ▓▓▓▓▓▓▓▓ ▓▓\   /  ▓▓  ▓▓▓▓▓▓\ ▓▓▓▓▓▓▓\\ ▓▓▓▓▓▓\     \▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓\ ▓▓▓▓▓▓▓\  ▓▓▓▓▓▓\
      |  | ▓▓▓\ /  ▓▓▓ ▓▓__   | ▓▓▓\ /  ▓▓▓ ▓▓___\▓▓ ▓▓__/ ▓▓ ▓▓   \▓▓       | ▓▓  | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓  | ▓▓
      |  | ▓▓▓▓\  ▓▓▓▓ ▓▓  \  | ▓▓▓▓\  ▓▓▓▓\▓▓    \| ▓▓   \▓▓ ▓▓             | ▓▓  | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓  | ▓▓
      |  | ▓▓\▓▓ ▓▓ ▓▓ ▓▓▓▓▓  | ▓▓\▓▓ ▓▓ ▓▓_\▓▓▓▓▓▓\ ▓▓▓▓▓▓▓| ▓▓   __        | ▓▓  | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓  | ▓▓
      |  | ▓▓ \▓▓▓| ▓▓ ▓▓_____| ▓▓ \▓▓▓| ▓▓\ \__| ▓▓ ▓▓     | ▓▓__/\ \       | ▓▓  | ▓▓__| ▓▓ ▓▓__| ▓▓ ▓▓__| ▓▓
      |  \ ▓▓  \▓ | ▓▓ ▓▓     \ ▓▓  \▓ | ▓▓\▓▓   \▓▓ ▓▓      \▓▓   \▓▓       | ▓▓   \▓▓   \▓▓ ▓▓   \▓▓\▓▓   \▓▓
      |   \▓▓      \▓▓\▓▓▓▓▓▓▓▓\▓▓      \▓▓ \▓▓▓▓▓▓ \▓▓       \▓▓▓▓▓▓         \▓▓    \▓▓▓▓▓▓ \▓▓▓▓▓▓▓  \▓▓▓▓▓▓ 
      |
______|___________________________________________________________________________________________________________
      |   
      |   
      |   interactive rotation & resize that is relative to the center dir vec will complete part of the basic tools
      |   the shading needs to be upgraded to work for every triangle rather than reusing a color sequence
      |   this will also segway into the color map and satisfy the minimum visual fidelity required
      |   i will finish up basic tools with line/point modification & beziers (all intersections pregenerated)
      |   intersections revealed in more detail when within dist from mouse/aim
      |   i realize now the base dataset is arbitrary if everything is preloaded in buffers via indice maps anyway
      |   ex: any data in any order -> -> set of triangles. this entire thing can be written in any language and honestly
      |   i don't feel like i need to use node if it's this simple. if i wrote it in asm or c or visual basic it would just be
      |   less useful in the end because so far i haven't had any issues making the mobile version work in tandem.
      |   
      |   a lot of this i slammed together. it's more a proof of concept and far from optimal. i can probably refactor this into something a lot
      |   smaller and more sensical. the entire render pipe could be replaced with standard webgl practices yeilding better performance.
      |   
      |   the paint tool is more like the pencil tool right now. to brush is to place geometry that intersects in real time
      |   i'm not too happy w/ performance. there's a lot to work on regarding the run-time data that fills the buffers. 
      |   basically pregenerated data structures that reduce the work load at run-time are going to help a lot
      |   
      |   border/inner border generation -> chamfer
      |   moveable objects given defined restraints (interactive handles or anywhere on obj if using ray)
      |   
      |   important features for accelerating the workflow are coming soon:
      |    - multi-select w/ clicking in world/menu
      |    - folder krap dupe/move (needs to be more generalized)
      |   
      |   to avoid the arbitrary twist there must also exist a secondary rotation methodology
      |   rotate on the yaw to setup a second rotation in the pitch. emulate this with the continuity of quaternions ? right
      |   
      |   i started using points with lines and got to triangles but the reduction to triangles is essentially an indice map
      |   i now need to automate triangles back to lines to allow the joining of geometry assuming they share at least one point
      |   is this better than nesting ????????????????????????????????????????????????????????????????????
      |   don't forget point to line and line to line intersections though..
      |   
      |   the depth buffer should be fixable. the k-d tree is interesting i will have to try a scaleable sample data and test out a query
      |   static premade shaded color map -> during tri pack w/ new k find the correct col and pack to second dynam buffer -> look same & shaded
      |   the alternative calculation for depth was entirely yolo low pow
      |   
      |   memory errors are big sad
      |   maybe less sad now with mem encoded offset 4
      |   fix mem_sum. fix save interaction with empty folders. fix nesting logic. fix vertex fetch error. fix complex save file load
      |   
      |   poly fill alg
      |   destructive poly interactions require connecting two lines of different sizes. easier when just on one plane
      |   
      |   fake shadow idea : i think this could work
      |   pregenerated indice maps that determine shade by the location of an arrow pointing into a sphere ( all points precalc )
      |   exact input data is interpolated to nearest data points on sphere
      |   to pick 1 light pick shade closest to the vector representing you_f - source_f
      |   scanning ahead of time to determine openings (how many) and then checking their fov from center and angle between 
      |   opening->light and center-light. openings are determined by ray trace to center 
      |   to add light source interpolate a shade by moving a plane (opening angle offset as dir) through the object
      |   and picking closest to plane or different math same thing ?)
      |   
      |   the app needs a simple scripting language. and requires type recognition
      |   the syntax converts to a look up table and if the data types of in/out chain match always compute
      |   variables can be set and must be assigned before the next code. use table.
      |   
      |   the tool gun will be a thing soon
      |   !!! THE SCRIPTED OBJECTS DEFINE ENTITIES (new type & list on tree) (active & with body)
      |   
      |   with in-app scripting any sequence of actions can be automated by any user. this extends the possible user input
      |   as widely as possible. calling ray traces to find data. referencing data and placing copies along curvature. some functions will be provided
      |   to calculate line length to make interpolation more accessible when using lines as a reference.
      |   for ex: with a short script you can place duplicates along a spiral where the distances between the objects are set along the line of the spiral
      |           to the input number(s) and make all objects rotate to face any/random direction. manipulating sequences will be semi-automated.
      |   also ray trace or ray scan passing it a trace per dx/dy -> further methods to sort capture data
      |
      |   a real time script can provide interactive components and animations.
      |   i was planning to make interactive objects and i realized rotational ratios would be interesting. say i bind two objects to rotate relative
      |   to each other based on their difference in diameter. this would connect an important part of movement interactions pertaining to machinery
      |
      |   somewhat related but a point map or point cloud would be interesting to apply animations onto
      |
      |   add insane mode where all sounds are extra
      |   find wood screech sound of table moving for finish when translating lol
      |   make objects fly along an arc and spin when being translated from a to b
      |   
      |   so far so good w/ a single cubic bezier. i will probably reuse it to make multiple segments connect. the only issue is that I now need to
      |   do the integral to find all of the values of u that equate to some percentage of the line's length.
      |   https://www.desmos.com/calculator/bitmjl5dno
      |   automating integration will work best for the next step but i'll first make the bezier without...
      |   
      |   primary:
      |             - q does not work when in input field lol
      |             - make purple lines only when hover folder...
      |             - chaikin's test -> visual fidelity
      |             - bezier -> basic freedom
      |             - mitre or slice geometry by plane -> basic freedom
      |             - rotateObjectToDir (two stage rot w/ removing an axis that's it)
      |             - line edit
      |             - control of inner dir tool
      |             - folder controls move to folder tree -> object or folder selection -> tools apply to obj(s)
      |             - bounding box indicator around object and reduce yellow color
      |   
      |   
      |   side view's can be a static map generated and reduced to a final line/point reduction implying a ? 4*+ ? nah ? performance bump
      |   side view data can contain depth information directing the selection into objects underneath repeating layout patterns
      |   flipping sides of the cube like most software can be animated.

      |   [ all reference material ]   
      |   https://youtu.be/vLQVm5POyOY?si=K7oKaUyLg8_uWxA5
      |   https://youtu.be/mpTl003EXCY?list=PL_w_qWAQZtAZhtzPI5pkAtcUVgmzdAP8g
      |   https://youtu.be/mHVwd8gYLnI?list=PL_w_qWAQZtAZhtzPI5pkAtcUVgmzdAP8g
      |   https://youtu.be/jTgdKoQv738
      |   https://youtu.be/ln3vI4JEArc
      |   https://youtu.be/zjMuIxRvygQ
      |   https://turbo.js.org/ 
      |   https://youtu.be/upLnFI8LzB8
      |   https://youtu.be/2OSEyo9oS6E
      |   https://en.wikipedia.org/wiki/Octree [not used]
      |   
      |Numerical Integration:
Use numerical integration techniques to compute the integral in real time. Common methods include:

Trapezoidal Rule
Simpson’s Rule
Adaptive Quadrature   
______|___________________________________________________________________________________________________________
      |   
      |   TINY PROBLEMS
______|___________________________________________________________________________________________________________
      |   
      |   
      |   
      |   
      |   
      |   
      |   
      |   
      |   
      |   
      |   
      |   
______|___________________________________________________________________________________________________________
      |   
      |   EZ FIXES
______|___________________________________________________________________________________________________________
      |
      |
      |   bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap bezier asap 
      |
      |   make mouse dpi setting - also make the simple slider boxes for menu
      |
      |   looks like center obj needs to be based on the bounding box center instead. taking the mean point is silly at this point
      |
      |
      |   i realize now it's the same alg but the ratio is used to distribute duplicate points
      |   random nightmare situation
      |   
      |   multiple ways to handle remainder so you can determine either add / remove points to nearest ...
      |   if it's 1 point over n*bundle it will make an entire bundle-1 to compensate or allowing round down implies
      |   the other smaller reference set of points is reduced by 1 point instead. data loss vs data excess.
      |   it might become a trivial setting not sure yet
      |   
      |   443 points
      |   32 points
      |   13.53125 points per point :: 401 total point difference
      |   32*13 = 416 points not good enough method
      |   443%32 = 27 :: 32-443%32 = 5
      |   (32-443%32)+443 = 448
      |   this means i can just use the first 443 points and add 5 to make it fit 32
      |   meaning my ratio is now 448/32 = 14 which can be obtained from floor|ceil ofc
      |   
      |   i realize now maybe only need to sort numbers prior so i now assume for now the larger obj gets the remainder points..
      |   
      |   i will just make it default to either remainder > || < 32/2 -> determines which object gets the remainder
      |   points as a duplicate of it's very last. that should take care of the last bit of the distribution. i'm sure it could be
      |   even smoother some how but considering 99.9% of the time any use case will already provide properly ratioed sequences this is fine
      |   if not you are doing art anyway
      |   
      |   i see now this is not a great way to do the edge connect. i think it would be better to treat lines as their theoretical representation and use interpolation instead.
      |   difficult problem because some cases my original alg works the best. some cases this should work too. but in other cases interpolation is required when # points delta > signif
      |   
      |   
      |   to split geometry i think the way is to take all lines that arrive at the same point and mark that point as part of the set
      |   that is being translated. then modify the two sets independently. this should convert the poly alg into two partitions
      |   where the second 'face' set is now stretched/morphed onto the splicing plane
      |   this will not work with a plane intersecting with face geometry.. faaak
      |
      |
      |   make a click drag / click timer and animate a bounding box
      |   i realize now to draw wire frame you can ray trace each vertex and when vertex shows behind remove connected lines. this would have to be
      |   a pregenerated set where all data is generated by tracing each line's points from every grid point on a sphere around the object
      |   unlink needs to not work for objects too small
      |
      |   plane could next flip to plane most co-planar with player view
      |
      |   encode version and player pos
      |   fix menu positioning by adjusting max height and using .clientHeight
      |   css should do everything and js just reads info. previous code design was not meant to be the best just work
      |   now time to replace update a lot of systems. everything will get a lot easier soon.
      |   
      |   
      |   you should be able to input equations for input numbers :
      |   auto remove text from inputs real time
      |   look through string for () find ( g ) and put content into say type group g: ex 4*(3+5) -> 4*g
      |   scan through counting the open open open close close ... for brackets
      |   at each open is a g that is assigned depth by the summed states of open and close (close -1)
      |   0 open 1 open 2 open 3 close 2
      |   each g has now depth. just evaluate and store the real g
      |   evaluate should be intended to be applied to groups and when all groups are made real
      |   add those numbers into the next layer outward from the inner most group carrying back the numbers
      |   
      |   
      |   make functionRunList to auto generate a list of all folders in active use
      |   
      |   i need to make buttons ref to function be able to auto handle objs containing the fn ref'ed info
      |
      |   rotation around grid plane needs to also use the modified grid
      |
      |   already have delete by id but need fn to delete all w/ obj id
      |   
      |   after locking to point set grid offset for line/plane to components n/grid_scale -> remainder ?
      |   remove old bounding check or system for scroll ????
      |   with lines disabled it runs faster for the mouse to world paint lmao sick
      |   
      |   selected obj must draw before the drawn lines and make purple opacity like 0.85
      |   on finish dupe placement with shift t it needs to return the selection back to any arbitrary prior selection
      |   
      |
      |   when folder selected/hover display two buttons on side to dupe or delete or move ...
      |   when folder selected/hover use bounding box indicator function
      |   obj in folder hover to select options for dupe/del/edit
      |   folder sort button and folder auto split =========)))))))))))))
      |   all tools should apply to all objects or combinations
      |   actions need to apply to either folder/selected set/individual relative to what? selector ?
      |   
      |   needs a help gif guide
      |   move depth and culling to draw settings
      |   
      |   paint needs shift click to draw lines between single clicks, can check for shift when m_t_objs load fn as work around
      |   disable grid auto locking for movement somehow...
      |   
      |   make the axis lock box also show current. somehow make both features at the same time make sense. hovering on it displays a dir holo in front of the player !!!!
      |   i need one of those layers to separate static ar indices automatically so my hard coded stack is created and logged via id
      |   
      |   i need a slice/split geometry by plane. this would allow obj trimming. chamfer. angled cut
      |   maybe look at the problem as the volume within. not sure
      |
      |   
      |   folders not working with save correctly. maybe loading needs to be slowed down or done in a more reliable way
      |   
      |   just noticed mem_sum equates to 7588 instead of the actual mem_sum provided within the mem_log after making/deleting one obj
      |   
      |   vertex fetch requires 227, but attribs only supply 180. DEPTH setting issue. likely due to moving some points to the bottom of stack
      |   make initial and final point of obj noticeable in size
      |   splitting the gun into two components will allow it to be animated (need to finish color map)
      |   
      |
      |   all fns overload like (js does not support it explicitly? no errors without array anyway)
      |   theFunc([1,2,3,4])
      |   so you can say
      |     setPoint([ a,b ]) // a set to b
      |     setPoint([ a,b,c ]) // ... + c
      |     setPoint([ a,b,c,d ]) // ... scale by d
      |     etc
      |     
      |   shift bounding box along axis to fix the slightly offset box for some geometry
      |   duplicating does not include the modifications to the inner dir vec
      |
      |   pre-generated indice mapping of lines to remove duplicate lines
      |
      |   bounding box indicator function generalizes bounding box indicators by accepting (not sure about color data)
      |    displayBox(name_string, [obj ids], )
      |    { use the elog system and reuse the bounding box world object as an input }
      |    when only one obj id place the bounding box relative to the inner dir vec
      |
      |
      |   reversing the link alg could output the original sets !
      |   similar to directly copying the data based on the alg rule set
      |   
      |
      |   fix the damn paint tool to allow selection/deletion
      |   mouseToWorld is slow. i can avoid the issues it creates by logging the 2d coord
      |   then converting to the 3d after. by separating it will lose less detail as the log is faster
      |   javascript only runs so fast u know
      |   
      |
      |   write pivot align again or inject the change of basis
      |
      |   pivot align does not work with some orientations (colinear ?) might be a zero in the dividend
      |   maybe i have failed to ensure a pipeline is entirely buffered where cross returns a new. it should edit preallocated space instead 
      |   i recall the 2d inds for circles were not entirely buffered. never finished.
      |   sub folders need to be considered when cursor color to folder change
      |   sub folders need carry over when a folder duplicated
      |   2d inds need to be fixed for translation/fns, maybe just pre-populate the vectors
      |   tree border width is opposite need to reverse w a 1-x
      |   
      |   arScale() should accept an array that determines what components are to be used in the computation reducing cpu (firefox)
      |   indicator for folder move is not always working -> so i found it works after using normal translation w/ v but not w/o using it 1time first?!??!
      |   also world points are visible through objects ?!?!?!?!? must split draw sequence into a before and after by pushing afters to a temp ar (faster)
      |   raises the question should all types be done this way ?
      |   
/*
// click_map = clickMonitor.map;
var clickMonitor =
{
  active: 1,
  timer: 0,
  time_log: [0, 0, 0],
  dt: 80,
  dt_s: [2, 5],
  map: [0, 0, 0], // single, double, drag
  run: function ()
  {
    if (key_map.lmb && !pointerOutsideWindow[0]) // key down
    {
      if (this.time_log[0]==0) {this.time_log[0] = Date.now();} // set time 2

      if (this.time_log[0] != 0 && !this.map[2] && Date.now() - this.time_log[0] > this.dt_s[1]*this.dt)
      { // drag start
        this.time_log[1] = 0;
        this.map[1] = 0;
        this.map[2] = 1;
        // console.log('drag start');
      }

    } else { // key release

      if (Date.now() - this.time_log[1] > this.dt_s[1]*this.dt && this.map[2] == 0) {this.map[0] = this.map[1] = this.map[2] = 0;}
      if (this.time_log[1] == 0) { this.time_log[1] = Date.now(); } // set time 1

      if (this.time_log[0] !=0 && Date.now() - this.time_log[0] < this.dt_s[0]*this.dt)
      {
        this.map[0] = 1;
        this.time_log[0] = 0;
        // console.log('single click');
      }

      if (this.time_log[0] !=0 && !this.map[2] && Date.now() - this.time_log[0] > this.dt_s[0]*this.dt && Date.now() - this.time_log[0] < this.dt_s[1]*this.dt)
      { // long click
        this.map[0] = 0; this.map[1] = 1;
        this.time_log[0] = 0;
        // console.log('long click');
      }

      if (this.map[2])
      {
        this.map[2] = 0;
        this.time_log[0] = 0;
        // console.log('drag end');
      }
    }
  }
}; functionRunList.push(clickMonitor);
*/
______|___________________________________________________________________________________________________________
      |   
      |   ALL
______|___________________________________________________________________________________________________________
      | 
      |   rewrite pointerOutsideWindow() to accept boxes. location ??
      |   event priority system: using any key/input can be directed to the next event awaiting completion w/ any input
      |   move object along axis tool
      |   really need line inside line tool. and set length of line
      |   all static data can be checked to group triangles coplaner -> resulting groups provide unique surfaces
      |   use the run list to create a ui for active modifiers -> data will end up in obj fns kinda big sad but maybe just use proper settings/functions string set
      |   
      |   simple line plane intersection for rotation inside a plane would make a lot more sense and ig this would be the next evoltuion of pivot align run
      |   simple tool FAK: right click lock point (whenever cursor helper?) -> move point -> finish move -> write data
      |   reverse object geometry fn with mirror along the linked edges
      |   ball rotate tool where you select inside surface of ball with simple line/sphere
      |   - this would require pitch->yaw type of rotation. maybe settings for different types of rotation later
      |   pivot align can work with a cross vec holo
      |   shift v should block input from all obj's in 2d query
      |   short cuts for move obj||folder should both should cancel either -> entire key system needs rewrite fak
      |   multi-select w/ drag or in list or world
      | 
      |   temp objs can be deleted but crashes ofc. this could be a system if it notices upon deletion to undo that step..
      |   - deletion of any temp obj calls it's event (simple back) nah too complicated havent finished main features yet
      |  
      |   most obj fns could clone their opts -> generalize control struct
      |  
      |   i have forgotten the need for line/line intersections & line/mouse selection
      |   almost done w/ this one: need exclusion of self and reorganize the start of obj. ensure enable and active. kind of redundant..
      |   the functionRunList can contain color data that gets mapped later !!! GOOOOOD each Run obj will have two maps: obj [], col []
      |   or if there exists a color map the color can later be set directly ?
      |   
      |   
      |   if saves stored location, direction, zoom, and movement locks, a writing space becomes more accessible.
      |   mouse to world combined with a line/plane will work for drawing and not lag so much
      |   
      |   
      |   just make each obj store 3 directions that absorb rotation then reassume it's original
      |   default state -> conjugate???
      |   should be easy to revert change this way and keep a quat rot log essentially. assuming i can use their inverses w/ conjugate???
      |   this way i can select to translate w/ arrows and then swap between grid/translate -> circle/rotation w/ holograms
      |   might need to write something to test distance from point on circle (ez if predefined but bad in long term must be theoretical)
      |   oh just use origin o on plane and take delta vec and use that for angle selection. so lpi first.
      |   animated stackable logged quat rot holos in the end
      |
      |   per obj unit vecs saved data. aka all objects get additional data to absorb modification.
      |   k-d (theoretical) -> faster query for 3d world data. would replace 2d queries if distance from a line became faster this way. faster obj modif w/ nesting.
      |   chaikin's or something better lol -> repair some z buffer
      |   color map finish -> i'm keeping the pipeline as is. educational purposes initially. textures will come with entire rewrite. mat4's w/ libs approach.
      |   point nesting tool (auto sub-folder)
      |   some keybinds need to be event based ! rule set required
      |
      |   can a shader processing 4*n sets of data use a secondary set of modifiers and possibly a asin+bcos matrix 
      |   asin+bcos per entire diagonal -> a and b allow combined states of their weights in some way ?? to represent any rotation
      |   as a preprogrammable set of data generated by js that applies per obj rotation
      |   
      |
      |   most important is encoding 3 points using center that are simply
      |   n+o+1: where n is an axis, o is offset; this case center; and 1 defines unit form
      |   must update entire code structure for this one i knew i should have done this a long time ago
      |   with fast reference vectors any data can be reoriented to it's original state without a log
      |   and making a log can simply recover the array data (save data) making logs more simplistic
      |   the look at function will use a direction vector as a reference but the twist is entirely arbitrary
      |   and must rapidly change for ex: editing inside a polygon along it's lines that share no colinear normals
      |   grid orientation will be very automagical w/ these combined
      |
      | =>          [ so now to fix all loops and pregenerated loops / offsets inside ]
      | 
      |      - DONE ? working through datafns now. make sure to fix all instances of fn call m_objs_loadPoints takes additional params 0 or dir (4f)
      |      - DONE to make old saves continue to work i will separate the data and loading combines back into new format... only 1 time thing.
      |      - DONE splitObj can be updated to fix most functions
      |      - DONE now to update save fn, then update load fn, ...
      |      - DONE obj point mean can't include dir points
      |      - DONE so now the center is off b/c of the average
      |      - DONE render sequence
      |      - DONE fix preview
      |      - DONE dots fix
      |      - DONE line fix
      |      - DONE link_obj
      |      - DONE updateNormalMaps
      |      - DONE updateRayInters
      |      - 
      |      - NEED FIX low call rate fn -> update dir vec visual buffer (only 3 lines -> write via indice reference -> all rel to ctr)
      |      - NEED FIX select2dpoint()
      |      - 
      |      - NEED CHECK looks like findbyctr_obj and select2dpoint functions use memory offsets to center data so put new data after.
      |      - NEED CHECK getctr_obj and getctr_ghost both reference length to get end point. will have to change
      |      - NEED CHECK obj 2d center inds would be affected ??? resume 3684
      |      - 
      |      - 639 : remove center is here too
      |      - 1367 : splitObj()
      |      - 1431 : datafns
      |      - 1541 : cloneObj()
      |      - 1632 : updateNormalMaps()
      |      - 2139 : getctr_obj
      |      - 2149 : getctr_ghost
      |      - 3628 : ...
      |      - 
      |      - so far it's complete ? so you can now select the internal dir vec. it absorbes scale and rotation at the same time
      |
      |
      |   along axis when z is zero circles generated have incorrect center
      |   
      |   bounding box should be relocalizeable
      |   
      |   termination of the run list should remove all eLog stuffz but not tooo fast
      |   grid need a radial fade effect
      |   
      |   soon can try simple algs like chaikin's
      |   something that can reduce surfaces to a set of smaller surfaces can help repair the accuracy of the depth buffer
      |
      |   fundamentally i'm missing differentation when applying tool struct w/ ui type w/ move fn w/ specific use
      |   to avoid always write a duplicate functional representation of the fundamental task any wide task such as all tools and their purpose.
      |   part of this is also the setup for key binds. there's no middle table.
      |   
      |   z should undo a step in the pivot align
      |   
      |   
      |   elemental scroll directly w/ the div list
      |   - loop pointer map.layer 1 and 2 are first made end to end no grouping or make conversion
      |   - send data to array as they were passed, ex:

            makeElement(addButton, // fn -> (fn, params))
            { params }

      |   - 
      |   - 
      |   - 
      |   quats allow vector add/sub that; if sphereical arcing; allows preservation of direction. it's one motion. 
      |   auto z buffer top most
      |
      |   small menus
      |   start moving colors into array formats to allow pipe: load/modif col_ar sets -> col_ar set -> col_str set
      |     
      |
      |   temp objs need to be grouped with an event identifier 
      |   try experiment w/ date now
      |
      |   fix opacity not working w/ no depth
      |   dupe folder should also dupe inner folders. Oh god help.
      |   fix opacity for line color change for objs in folder selected
      |   shift modifier for folder short cuts
      |   twist applied along axis by a sum of rotation
      |   connecting multiple lines or lines of different sizes ??? EDGE CONNECT
      |   point modification system
      |   bezier tool (requires way to connect sequences)
      |   menu overhaul (retarding progress w/o using scroll... draw out plan)
      |   measure angle (F to confirm 3 points)
      |   m_t_objs mem temp objects needs to be shown in tree as purple entry if points > 0
      |   mode for all lines / some lines / no lines
      |   paint still needs to be fixed so it doesn't continue a second line until key release
      |
      |   add C-s and C-o for files.
      |   need a temp 3d mem space for objects to be drawn as holos. color passed in for lines (keep simple?)
      |   maybe use my folder system to manage a non-interactable folder that contains temp objects?? Wait idk idk idk idk
      |   paint tool for tri's for the color map. ig color map will be in save file first step
       
      |   maybe just for fun try an animated projectile that travels to hit location
      |
      |   need to use objects to connect w/ run list for most animated tools
      |   nominal lumber list ( need geo name for line objs )
      |   more fn obj conversion (doing trns obj) (fn done now fix rest of code)
       
      |   add an animated world (floating cubes?)
      |   animations/physics ticks must be parallelizable for GPU or bad performance in the end
      |   not entirely sure if it's possible to do so w/o a special way to apply a generated set to a secondary set such
      |   that data sections receive individual rotations..
       
      |
      |   multi select... ? already going via folder
      |     so..
      |     already have setup for obj tools w/ run & active checks
      |     lame but could setup like this:
      |       - replace instances of by obj index data modification to apply via list of i's
      |       - then select stacking
      |       - dynamic bounding highlight boxes per or for joint select
      |     
      |    
      |    
      |    
      |   Make a pistol that shoots green lasers that bounce!
      |   Ray trace is done. Now to make it reflect and start a new trace -> keeps going until a defined amount of reflections.
      |   This would look cool inside a sphere! w/ no limit it'd probably crash
      |   physics engine should be possible but first I need to fix my triangles
      |   collision detections will need to borrow from the same idea of culling back faces
      |   but I will replace the tri actually with a bounding box
      |   so I first do check if they are close together then use dist to plane w/ dot simple
      |   if anything checks in adjust the objects velocities (rotational and position)
      |   collision's determine the angular velocity by distance from center
      |   apply standard gravity ticks
      |   collisions must always result in energy lost
      |   maybe all velocities and acceleration can be computed on the gpu or in a worker or both.
      |   a worker's latency may not matter if only left to manage some layers not visually noticeable
      |   the ground is defined by a positional min/max (no loop if below threshold)
      |   the ground can apply more dampening than obj to obj
      |   default amount of inverse angular velocity
      |  
      |   to get started setup the buffers
      |   box collision function and tests
      |   
      |   13.25, 13.625, 74.875
      |
      |   finish center inds?
      |   need parallel array manager to auto manage all the krap
      |   Menu updates need to be more efficient. Primarily updating selected item to curb tab alg proc
      |   Float32Array already contains byteLength and byteOffset.
      |   Match all of my data structure to use Float32Array to remove all type conversions
      |   fix preview image to offset w/ 2d forced square w/ check
      |   if encoded center is within plane of poly's captures some overlap
      |   engine space
         - generate dir vec curves
      |
      |   nested point sequences at overlap point should be fairly easy. take note of logic
          - placing loop at a point implies to keep sequence continuity one additional point must be placed after loop insertion
          - len of loop does determine the need for the additional. I assume none or 1. may be 1 or 2.
          - logic diagram could provide more direct code struct
      |
      |   unique ids for objs will help w/ identical objs in future?
      |
      |   lock point offsets grid? could fix a lot of things w/ rmb select
      |   lmb in free mode is setting plane to inter_rnd for some reason..
          - when point locked the lpi is not being calculated with the arbitrary offset essentially
      |
      |   ? intersection reveal
          - doesn't have to be run all the time if the purpose is to model
          - line's checked for intersection within some range of it's len.
      |
      |   just noticed save data corrupted by single point data
          - temp fix is making all 1 point objs 2 equal points w/ center ig
      |
      |   all my functions relative to the plane can be replaced with a general obj orient fn.
      |
              might have the answer to this now with the new manual 2d gen circles
      |
      |   unit vector line conversion method for arc len
      |
      |   So I guess I need to learn geometric algebra now. Quaternions are not even meta anymore.
      |   Random idea ::
      |   if I can clip a region of polygon's in 2d space creating two sets
      |   -> i could then display them at two different fov's creating a zoomed region for scopes/sights
      |   Obj cut hole { i could try using the link script on to the hole... }
      |   i keep reusing my linear link. need to learn poly fill alg
      |   i need to implement geometric obj creation.
      |   with more layers of encoded data i can keep logs of what obj's are fundamentally

    All middle points of lines are free as I have encoded centers. Highlight center point on any obj w/ 2, 3 pts.
    Skeletal animation -> point interpolation. Long way to go I don't have interp maps yet. Do I really need to interp packed data??

  I can make real physgun by compounding quaternions and ray trace
  Make the planetary ico 
  Assault cube old code

  .reduce is a method that accumulates the values of an array into a single value (in this case, the sum of the squared components).

  Instead of clipping for side planes I could draw lines in two directions determined if x1>x2.... lol NO CLIPPING NEEDED
    for a lil extra travel just offset

  modulo distributes with switch with for loop ez wow for ex:

    for (i)
    {
      switch(i%3)
        case 0:
        case 1:
        case 2:
    }

    rayInterMap[] containing [Float32Array(4), Float32Array(4), ...] : clear entries upon calling another trace for now
    rayIMap[] populates data for poly loop to loop through allowing for poly color changes / indicators. Leading to a colorMap for tris.
      colors mapped as numbers converted by static array of colors.

    starting with 1 call to trace
    3 sides 3 vec a b c omni order thus equally in sign implies within poly

    sign is a/|a| , a/Math.abs(a) , Math.sign will be fastest? least ops w/ js calc sign
    for every entry, later refine to shorten loop. for ex: dot all [largest obj point from center (lrgp-ctr) premapped] w/ look_f (look dir)

      tri in order a b c (points) 

                b
               /|\         n from dataset: obj_normalMaps
              / n \
             a     c

                 b                     b                                     b
                /|\         =>        /|        <SHARED => SWAP SIGN>        |\
               / | \                 / |                                     | \
             a       c             a    (a-c)/2                       (a-c)/2    c

    maybe this is related in a sense to the barycentric coordinates. say I have a middle vector 
    point on poly can be on either one to confirm that it is inside 3 points
    two instances of comparing a series of signs IF the first one misses. So sometimes there is only one call! wow
    v01 = b-a                 ->        sub(b,a)
    v02 = (a-c)/2 - b         ->        sub(scale(sub(a,c),0.5),b)
    v03 = a - (a-c)/2         ->        sub(a, scale(sub(a,c),0.5))
    v11 = c-b                 ->        sub(c,b)
    v12 = (a-c)/2 - b         ->        sub(scale(sub(a,c),0.5),b)
    v13 = b - (a-c)/2         ->        sub(b, scale(sub(a,c),0.5))
    if     sign(a) == sign(b) || sign(b) == sign(c)   =>   push point to rayInterMap[] && rayIMap[]. wat

    - Make ray trace fn use inputs so I can call it to get data anywhere.

    - Cut obj in half by plane!
      intersect/ray trace w/ plane between pairs. Just remove any other points and keep the intersections. Not sure if I can do this so easily w/ point order being critical

    - For linking lines a tool to collapse a line into one axis would be fantastic. For a dynamic tool: use start & end to define the line and move points to that line.
    - Spiral tool OR line gen tool w/ inputs => same as spiral w/ the right settings

    - Enter key opens text overlay to search for function. goes like: [ENTER] type "link" [ENTER] -> link is member of table call it's function. Function stored in switch case calls obj_link();
      - and "link.k=l" rebinds link(); activator key to l. And if already bound swap. Block some keys maybe.
      - if any part of text is contained by a list of syntax display those options below and what options exist after the dot operator
      - find obj by would be amazing. by dist returns array of i's that will be modified w/ function 
      - this could provide the in game scripting w/o eval of js directly.
      - goTo(findBy).. bring(findBy).. scale(findBy)

    = Encode obj means into sectors by itor over x,y,z type loop with some set size by dividing size up into some number (4*4*4) => 64 sectors. Like a 2d grid but 3d.
      find their centers by excluding end and offset by half of number (2). map to table
        table
          [center pos, array of _i's]

  - just noticed flying toward a point w/ crosshair doesn't bring you to that point... Aim down fly backwards ends up on a 45?? can't remember if intentional

  - use a time delta for interpolation and player translation to avoid runtime speed fluctuations. so I need a timer for w a s d up down. 6 timers
    - after trying this i got the rubberbanding effect lol. client-server sync can fix.

  - research k-d tree / octree
  - Button to output linear obj to console. Model gun with game -> put into game -> model game with gun -> put into gun
  - The tab alg can be applied compression relative to center. like a 3d mesh impacting the screen creating a focal lense. this would actually slightly help differentiate object's that are close together IN 2D. maybe..

    Badly need to implement a struct system for tools generally such that every tool overrides some keys.
      Points should be a point tool (Place point - F)
      Circle tool (Place circle - F) (I need a later formula to compress a 4 point circle to align with the grid)
      Center Expand (Start/Finish applied as delta - F)
      Dynamic Expand (Applies compression/expansion with 3 input numbers)
      Rotate around Axis (For now input into box with deg. Use point and plane line)
      Stacker tool (Accepts distance and stacks) (Two input boxes)

    -	Use a bezier function of n points. Dynamic integral function to find the arc length. arc_l/n provides the sections to be influenced by perp vectors &&& the actual vertices of the curve. Divide by n and n/2. Go to n-n/2
    -	Maybe a separate self made api for handling the screen interface would be wise.
    -	3d/2d simple text obj generation for real notepad capacity. Easier to just store the string in the bg.
    -	Effects and sounds.

    // MAYBE SOME TIME IN 2053 (after christ)

    -	CLIPPING
    -	Add dancing stick figures to every vertex immediately. I will do this. Don't fuck with me.

    add clipping sides & what happens if 3 points where 1 is out ?
      total points goes from 3 to 4. This can happen n times per poly. How deal w/ data??????

    obj_select(_r); where _r is radius from center screen to screen space points. Same dot sequence to sort?
      how about auto group points to 3d sectors and a single ray trace reveals some any quantity of data within the block.
      inconclusive. Math implies computation. blocks can't fail. 


